#!/usr/bin/python

#holostream2.py

import wx
import wx.aui
from wx.lib.pubsub import Publisher as pub
import threading
import numpy as np
import random
import timedatastruct as tds
import spectrum_gen as sgen
import holocontrol
import mplpanel

ID_CreatePerspective = wx.NewId()
ID_CopyPerspective = wx.NewId()
ID_FirstPerspective = ID_CreatePerspective+1000

# PubSub message classification
MSG_NOTIFY_ROOT = ('root',)

class Notifier(object):
    def __init__(self):
        super(Notifier, self).__init__()
        self._data = dict()

    def SetValue(self, key, value):
        self._data[key] = value
        # print 'Notifier recieved the following:', key, str(value)

        # Notify all observers of config change
        pub.sendMessage(MSG_NOTIFY_ROOT + (key,), value)

    def GetValue(self, key):
        return self._data.get(key, None)

# Define notification event for thread completion
EVT_RESULT_ID = wx.NewId()
 
def EVT_RESULT(win, func):
    """Define Result Event."""
    win.Connect(-1, -1, EVT_RESULT_ID, func)
 
class ResultEvent(wx.PyEvent):
    """Simple event to carry arbitrary result data."""
    def __init__(self, data):
        """Init Result Event."""
        wx.PyEvent.__init__(self)
        self.SetEventType(EVT_RESULT_ID)
        self.data = data

#------------------Begin Main GUI Classes---------------------#

class LoggerCtrl(wx.TextCtrl):
    def __init__(self, *args, **kwargs):
        super(LoggerCtrl, self).__init__(*args, **kwargs)
        # Observer of Notify events
        pub.subscribe(self.updateDisplay, MSG_NOTIFY_ROOT)

    def updateDisplay(self, msg_data):
        if 'logger' in msg_data.topic:
        #     self.printMessage(msg_data.data)
        # else:
        #     print msg_data.topic[-1]
            self.printMessage(msg_data.data)

    def printMessage(self, msg):
        """
        Receives data from thread and updates the display
        """
        self.AppendText(msg+'\n')

class StreamFrame(wx.Frame):
    def __init__(self, *args, **kwargs):
        super(StreamFrame, self).__init__(*args, **kwargs)
        self._mgr = wx.aui.AuiManager(self)
        self.plotcanvaspanel = mplpanel.MPLPanel(self)
        self.plotcanvaspanel2 = mplpanel.MPLPanel(self)
        self.loggerctrl = LoggerCtrl(self, size=wx.Size(800, 100), \
                                    style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.controlpanel = holocontrol.ControlPanel(self, size=wx.Size(250, 400))
        
        self._mgr.AddPane(self.controlpanel,\
                          wx.aui.AuiPaneInfo().Caption('Controls').
                          Left().MinimizeButton(True))
        self._mgr.AddPane(self.plotcanvaspanel2, wx.aui.AuiPaneInfo().\
                              Caption('Plot Canvas').Center().\
                              MaximizeButton(True).Movable())
        self._mgr.AddPane(self.plotcanvaspanel, wx.aui.AuiPaneInfo().\
                              Caption('AVG Plot').Center().MaximizeButton(True))
        self._mgr.AddPane(self.loggerctrl, wx.aui.AuiPaneInfo().\
                              Caption('Notifications').Bottom().MinimizeButton(True).\
                              MaximizeButton(True))
        self._mgr.Update()

        # Event Bindings
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.Bind(wx.EVT_MENU, self.OnExit, id=wx.ID_EXIT)

    def OnExit(self, event):
        self.Close()

    def OnClose(self, event):
        self._mgr.UnInit()
        del self._mgr
        self.Destroy()

class Controller(object):

    def __init__(self, app):
        self.app = app
        self.data_model = DataGenExampleModel()
        # self.mpl_model = MPLModel()
        self.view = StreamFrame(None, title = "HoloStream2", size = (1000, 700))
        self.view.Show(True)

        # Initialize the notification system
        self.notify = Notifier()

        # Make the app the subscriber to our made up ResultEvents
        EVT_RESULT(self.app, self.ReportNotifier)
        
        self.app.Bind(wx.EVT_TIMER, self.on_redraw_timer, \
                      self.view.controlpanel.redraw_timer)
        self.bind_view_events()

    def bind_view_events(self):
        for control, event, handler in \
                [(self.view.controlpanel.runButton, wx.EVT_BUTTON, self.onRun), 
                 (self.view.controlpanel.testButton, wx.EVT_BUTTON, self.onTest),
                 (self.view.controlpanel.resetButton, wx.EVT_BUTTON, self.onReset)]:
                control.Bind(event, handler)

    def onRun(self, event):
        self.view.controlpanel.runButton.Disable()
        self.notify.SetValue('logger', 'Query Started')
        self.notify.SetValue('logger', 'Query Finished because it was nothing')
        self.view.controlpanel.runButton.Enable()

    def onTest(self, event):
        if self.view.controlpanel.is_paused == 0:
            self.view.controlpanel.redraw_timer.Start(500)
            self.view.controlpanel.testButton.SetLabel('Pause')
            self.view.controlpanel.resetButton.Enable()
            self.view.controlpanel.is_paused = 1
        elif self.view.controlpanel.is_paused == 1:
            self.view.controlpanel.redraw_timer.Stop()
            self.view.controlpanel.testButton.SetLabel('Resume')
            self.view.controlpanel.is_paused = 0

    def onReset(self, event):
        pass

    def on_redraw_timer(self, event):
        def innerrun():
            newval = self.data_model.next()
            wx.PostEvent(self.app, ResultEvent(['logger', str(newval)]))
            # wx.PostEvent(self.app, ResultEvent(['plot_data', newval]))
        Query = threading.Thread(target=innerrun)
        Query.start()
        
    def ReportNotifier(self, notifydict):
        '''
        @param: notifydata is a dictionary, where each key
        is a differnt subscriber of the notification system
        to send its value (the data) to 
        '''
        data = notifydict.data
        if type(data) == dict:
            for key in data.keys():
                self.notify.SetValue(key, data[key])
        else:
            self.notify.SetValue(data[0], data[1])
        return

class DataGenExampleModel(object):
    """ A silly class that generates pseudo-random data for
        display in the plot.
    """
    def __init__(self, init=50):
        self.data = self.init = init
        
    def next(self):
        self._recalc_data()
        return self.data
    
    def _recalc_data(self):
        delta = random.uniform(-0.5, 0.5)
        r = random.random()

        if r > 0.9:
            self.data += delta * 15
        elif r > 0.8: 
            # attraction to the initial value
            delta += (0.5 if self.init > self.data else -0.5)
            self.data += delta
        else:
            self.data += delta

if __name__ == '__main__':
    app = wx.App(False)
    controller = Controller(app)
    app.MainLoop()


